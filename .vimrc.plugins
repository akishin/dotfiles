" for Plugin settings
scriptencoding utf-8

" for Vimfiler
" if isdirectory($HOME . '/.vim/bundle/vimfiler')
    " " Vimfiler をデフォルトのファイラーに設定
    " let g:vimfiler_as_default_explorer = 1
" endif

" for golang
if $GOPATH != ''
    " for vim-godef
    if isdirectory($HOME . '/.vim/bundle/vim-godef')
        " gd を押した時のウインドウの動作
        let g:godef_split=0
        let g:godef_same_file_in_same_window=1
    endif
    " gofmt の代わりに goimports コマンドを使う
    let g:gofmt_command = 'goimports'
    augroup golang
        " *.go ファイル保存時に自動フォーマットを行う
        auto BufWritePre *.go Fmt
    augroup END
endif

" for Wombat
if isdirectory($HOME . '/.vim/bundle/Wombat')
    colorscheme wombat
endif

" for localvimrc
if isdirectory($HOME . '/.vim/bundle/vim-localvimrc')
    let g:localvimrc_ask = 0
endif

" for endwise
if isdirectory($HOME . '/.vim/bundle/endwise.vim')
    let g:endwise_no_mappings=1
    " kana/vim-smartinput との競合防止設定
    " http://cohama.hateblo.jp/entry/20121017/1350482411
    autocmd CohamaAutoCmd FileType lua,ruby,sh,zsh,vb,vbnet,aspvbs,vim imap <buffer> <CR> <CR><Plug>DiscretionaryEnd
endif

" for NERDTree
if isdirectory($HOME . '/.vim/bundle/The-NERD-tree')
    " autocmd VimEnter * NERDTree
    " 隠しファイルを表示
    let NERDTreeShowHidden = 1
    autocmd VimEnter * wincmd p
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
    nmap <silent> <F7> :NERDTreeToggle<CR>
endif

" for NERD Commenter
if isdirectory($HOME . '/.vim/bundle/The-NERD-Commenter')
    " コメントの間にスペースを空ける
    let NERDSpaceDelims = 1
    " 未対応ファイルタイプのエラーメッセージを表示しない
    let NERDShutUp=1
endif

" for taglist
if isdirectory($HOME . '/.vim/bundle/taglist.vim')
    " let Tlist_Ctags_Cmd = "/path/to/ctags"
    let Tlist_Show_One_File = 1
    let Tlist_Exit_OnlyWindow = 1
    let Tlist_Use_Right_Window = 1
    nmap <silent> <F9> :TlistToggle<CR>
endif

" for srcexpl.vim
if isdirectory($HOME . '/.vim/bundle/SrcExpl')
    let g:SrcExpl_refreshTime = 1
    let g:SrcExpl_WinHeight = 8
    let g:SrcExpl_pluginList = [
            \ "__Tag_List__",
            \ "_NERD_tree_",
            \ "Source_Explorer"
        \ ]
    nmap <F8> :SrcExplToggle<CR>
    let g:SrcExpl_gobackKey = "<SPACE>"
    let g:SrcExpl_isUpdateTags = 0
    " let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
    let g:SrcExpl_updateTagsKey = "<F12>"
endif

" for syntastic
if isdirectory($HOME . '/.vim/bundle/syntastic')
    " Ctrl-e で Location List の表示・非表示を切換え
    " see also :
    "   http://stackoverflow.com/questions/17512794/toggle-error-location-panel-in-syntastic
    function! ToggleErrors()
        if empty(filter(tabpagebuflist(), 'getbufvar(v:val, "&buftype") is# "quickfix"'))
             " No location/quickfix list shown, open syntastic error location panel
             Errors
        else
            lclose
        endif
    endfunction
    nnoremap <silent> <C-e> :<C-u>call ToggleErrors()<CR>

    " for golang
    if $GOPATH != ''
      let g:syntastic_go_checkers = ['go', 'golint']
    endif

    " for perl
    " see: http://d.hatena.ne.jp/oppara/20140515/p1
    " let g:syntastic_enable_perl_checker = 1
    " let g:syntastic_perl_checkers = ['perl', 'podchecker']
endif

" for neocomplcache
if isdirectory($HOME . '/.vim/bundle/neocomplcache')
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplecache.
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_auto_completion_start_length = 3
    " Use smartcase.
    let g:neocomplcache_enable_smart_case = 1
    " Use camel case completion.
    let g:neocomplcache_enable_camel_case_completion = 0
    " Use underbar completion.
    let g:neocomplcache_enable_underbar_completion = 0
    " Set minimum syntax keyword length.
    let g:neocomplcache_min_syntax_length = 3
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    let g:neocomplcache_enable_quick_match = 1
    let g:neocomplcache_enable_auto_select = 0
    let g:neocomplcache_max_list = 20
    " Define dictionary.
    if !exists('g:neocomplcache_keyword_patterns')
      let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
    "imap <C-k>     <Plug>(neocomplcache_snippets_expand)
    "smap <C-k>     <Plug>(neocomplcache_snippets_expand)
    " TAB completion.
    "inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
    function! s:my_crinsert()
      return pumvisible() ? neocomplcache#close_popup() : "\<Cr>"
    endfunction
    inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>
    inoremap <expr><C-g> neocomplcache#undo_completion()
    inoremap <expr><C-l> neocomplcache#complete_common_string()
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y> neocomplcache#close_popup()
    inoremap <expr><C-e> neocomplcache#cancel_popup()
    " Enable omni completion.
    autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby          setlocal omnifunc=rubycomplete#Complete
    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
      let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.php  = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.c    = '\%(\.\|->\)\h\w*'
    let g:neocomplcache_omni_patterns.cpp  = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
    if !exists('g:neocomplcache_force_omni_patterns')
      let g:neocomplcache_force_omni_patterns = {}
    endif
    let g:neocomplcache_force_omni_patterns.go = '\h\w*\.\?'
    let g:neocomplcache_text_mode_filetypes = {
        \  'gitcommit': 1,
        \  'markdown': 1,
        \}
endif

" for neocomplete
if isdirectory($HOME . '/.vim/bundle/neocomplete') && g:Meet_neocomplete_requirements()
    " 日本語入力時に無効化する
    let g:neocomplete#lock_iminsert = 1
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplete.
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#auto_completion_start_length = 3
    " let g:neocomplete#skip_auto_completion_time = 0.3
    " Use smartcase.
    let g:neocomplete#enable_smart_case = 1
    " Set minimum syntax keyword length.
    let g:neocomplete#min_syntax_length = 3
    let g:neocomplete#sources#syntax#min_keyword_length = 3
    let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
    let g:neocomplete#enable_quick_match = 1
    let g:neocomplete#enable_auto_select = 0
    let g:neocomplete#enable_auto_close_preview = 1
    let g:neocomplete#max_list = 30
    " Define dictionary.
    if !exists('g:neocomplete#keyword_patterns')
      let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns['default'] = '\h\w*'
    " Recommended key-mappings.
    " <CR>: close popup and save indent.
    inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
    function! s:my_cr_function()
      "return neocomplete#close_popup() . "\<CR>"
      " For no inserting <CR> key.
      return pumvisible() ? neocomplete#close_popup() : "\<CR>"
    endfunction
    " <TAB>: completion.
    inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
    " <C-h>, <BS>: close popup and delete backword char.
    inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y>  neocomplete#close_popup()
    inoremap <expr><C-e>  neocomplete#cancel_popup()
    " Close popup by <Space>.
    "inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

    " Enable omni completion.
    autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType coffee        setlocal omnifunc=jscomplete#CompleteJS
    autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType php           setlocal omnifunc=phpcomplete#CompletePHP
    autocmd FileType c             setlocal omnifunc=ccomplete#Complete

    " Enable heavy omni completion.
    if !exists('g:neocomplete#sources#omni#input_patterns')
      let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.php  = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.c    = '[^.[:digit:] *\t]\%(\.\|->\)'
    let g:neocomplete#sources#omni#input_patterns.cpp  = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
    let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
    " let g:neocomplete#sources#omni#input_patterns.go   = '\h\w*\.\?'
    " let g:neocomplete#sources#omni#input_patterns.go   = '\h\w\.\w*'
    " let g:neocomplete#sources#omni#input_patterns.go   = '[^. \t]\.\%(\h\w*\)\?'
    " let g:neocomplete#sources#omni#input_patterns.go   = '[^.[:digit:] *\t]\.\w*'

    if !exists('g:neocomplete#force_omni_input_patterns')
      let g:neocomplete#force_omni_input_patterns = {}
    endif
    " let g:neocomplete#force_omni_input_patterns.go = '\h\w*\.\?'
    let g:neocomplete#force_omni_input_patterns.go = '\h\w\.\w*'
    " let g:neocomplete#force_omni_input_patterns.go = '[^. \t]\.\%(\h\w*\)\?'
    " let g:neocomplete#force_omni_input_patterns.go = '[^.[:digit:] *\t]\.\w*'

    " for rsense
    if $RSENSE_HOME != ''
        let g:rsenseHome = $RSENSE_HOME
        let g:rsenseUseOmniFunc = 1
        let g:neocomplete#force_omni_input_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
    else
        autocmd FileType ruby,eruby setlocal omnifunc=rubycomplete#Complete
    endif

    let g:neocomplete#text_mode_filetypes = {
        \  'gitcommit': 1,
        \  'markdown': 1,
        \}

    " " Define dictionary.
    " let g:neocomplete#dictionary_filetype_lists = {
    "     \ 'default' : '',
    "     \ 'vimshell' : $HOME.'/.vimshell_hist',
    "     \ 'java' : $HOME.'/.vim/dict/java.dict',
    "     \ 'javascript' : $HOME.'/.vim/dict/javascript.dict',
    "     \ 'coffee' : $HOME.'/.vim/dict/javascript.dict',
    "     \ 'vim' : $HOME.'/.vim/dict/vim.dict'
    "     \ }
    " " インクルードパスの指定
    " let g:neocomplete#include_paths = {
      " \ 'ruby' : '.,$HOME/.rvm/rubies/**/lib/ruby/1.8/',
      " \ }
    " " インクルード文のパターンを指定
    " let g:neocomplete#include_patterns = {
      " \ 'ruby'       : '^\s*require',
      " \ 'javascript' : '^\s*require',
      " \ 'coffee'     : '^\s*require',
      " \ }
    " " インクルード先のファイル名の解析パターン
    " let g:neocomplete#include_exprs = {
      " \ 'ruby' : substitute(v:fname,'::','/','g')
      " \ }
    " " ファイルを探す際にこの値を末尾に追加したファイルも探す
    " let g:neocomplete#include_suffixes = {
      " \ 'ruby'       : '.rb',
      " \ 'javascript' : '.js',
      " \ 'coffee'     : '.coffee',
      " \ }
endif

" for neosnippet
" if isdirectory($HOME . '/.vim/bundle/neosnippet')
    " imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    " smap <C-k>     <Plug>(neosnippet_expand_or_jump)

    " "imap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
    " imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    " smap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    " if has('conceal')
      " set conceallevel=2 concealcursor=i
    " endif

    " if isdirectory($HOME . '/.vim/bundle/snipmate-snippets')
      " let g:neosnippet#enable_snipmate_compatibility = 1
      " let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'
    " endif
" endif

" for unite.vim
if isdirectory($HOME . '/.vim/bundle/unite.vim')
    " ウィンドウサイズ
    let g:unite_winheight = 10
    let g:unite_source_history_yank_enable =1
    let g:unite_source_file_mru_limit = 200
    " Ctrl-j でソースを開くとウィンドウを横分割で開く
    autocmd FileType unite nnoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    autocmd FileType unite inoremap <silent> <buffer> <expr> <C-j> unite#do_action('split')
    " Ctrl-k でソースを開くとウィンドウを縦分割で開く
    autocmd FileType unite nnoremap <silent> <buffer> <expr> <C-k> unite#do_action('vsplit')
    autocmd FileType unite inoremap <silent> <buffer> <expr> <C-k> unite#do_action('vsplit')

    nnoremap <silent> ,uy :<C-u>Unite history/yank<CR>
    nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
    nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
    nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
    nnoremap <silent> ,ufr :<C-u>Unite buffer file_rec<CR>
    nnoremap <silent> ,urefe :<C-u>Unite ref/refe<CR>
endif

" for neomru.vim
if isdirectory($HOME . '/.vim/bundle/neomru.vim')
    nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
    nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
    nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
endif

" for unite-help
if isdirectory($HOME . '/.vim/bundle/unite-help')
    nnoremap <silent> ,uh :<C-u>Unite help<CR>
endif

" for unite-outline
if isdirectory($HOME . '/.vim/bundle/unite-outline')
    "nnoremap <silent> ,uo :<C-u>Unite -vertical -no-quit outline<CR>
    nnoremap <silent> ,uo :<C-u>Unite -no-quit outline<CR>
endif

" for vim-indent-guides
if isdirectory($HOME . '/.vim/bundle/vim-indent-guides')
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_start_level = 1
    let g:indent_guides_guide_size = 1
    hi IndentGuidesOdd  ctermbg=green
    hi IndentGuidesEven ctermbg=black
endif

" for lightline.vim
if isdirectory($HOME . '/.vim/bundle/lightline.vim')
    if has("win32") || has("win64")
        let g:lightline = {
            \ 'colorscheme': 'wombat'
            \ }
    else
        let g:lightline = {
              \ 'colorscheme': 'wombat',
              \ 'active': {
              \   'left': [ [ 'mode', 'paste' ],
              \             [ 'fugitive', 'readonly', 'filename', 'modified' ] ]
              \ },
              \ 'component_function': {
              \   'fugitive': 'MyFugitive',
              \   'readonly': 'MyReadonly',
              \   'modified': 'MyModified'
              \ },
              \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
              \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" }
            \ }

        function! MyModified()
          if &filetype == "help"
            return ""
          elseif &modified
            return "+"
          elseif &modifiable
            return ""
          else
            return ""
          endif
        endfunction

        function! MyReadonly()
          if &filetype == "help"
            return ""
          elseif &readonly
            return "⭤"
          else
            return ""
          endif
        endfunction

        function! MyFugitive()
          if exists("*fugitive#head")
            let _ = fugitive#head()
            return strlen(_) ? '⭠ '._ : ''
          endif
          return ''
        endfunction
    endif
endif

" for vim-quickrun
if isdirectory($HOME . '/.vim/bundle/vim-quickrun')
    let g:quickrun_config = {}
    let g:quickrun_config._ = {
        \ 'outputter/buffer/split': ':botright 8sp',
        \ 'runner': 'vimproc'
        \ }
    let g:quickrun_config['markdown'] = {
        \ 'type': 'markdown/gfm',
        \ 'outputter': 'browser'
        \ }

    " Gemfile の有無で bundle exec 有無を切り替える
    let execs = findfile('Gemfile', '.;') != '' ? 'bundle exec' : ''
    let g:quickrun_config['ruby.rspec'] = {
        \ 'command': 'rspec',
        \ 'exec': execs . ' %c %o %s %a'
        \ }
    let g:quickrun_config['ruby']  = {
        \ 'exec': execs . ' %c %o %s %a'
        \ }
    " <C-c> で実行を強制終了させる
    " quickrun.vim が実行していない場合には <C-c> を呼び出す
    nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
endif

" for vim-ref
if isdirectory($HOME . '/.vim/bundle/vim-ref')
    " FileType が text なら K で webdict を使う
    autocmd FileType text call ref#register_detection('_', 'webdict') 
    " vim-ref のバッファを q で閉じられるようにする
    autocmd FileType ref-* nnoremap <buffer> <silent> q :<C-u>close<CR>

    " 辞書定義
    let g:ref_source_webdict_sites = {
    \   'je': {
    \     'url': 'http://dictionary.infoseek.ne.jp/jeword/%s',
    \   },
    \   'ej': {
    \     'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
    \   },
    \   'yahoo_dict': {
    \     'url': 'http://dic.search.yahoo.co.jp/search?p=%s',
    \     'line': '57'
    \   },
    \   'wiktionary': {
    \     'url': 'http://ja.wiktionary.org/wiki/%s',
    \   },
    \   'wikipedia': {
    \     'url': 'http://ja.wikipedia.org/wiki/%s',
    \     'line': '3'
    \   },
    \ }

    " デフォルトサイト
    let g:ref_source_webdict_sites.default = 'ej'

    " 出力に対するフィルタ
    " 最初の数行を削除
    function! g:ref_source_webdict_sites.je.filter(output)
      return join(split(a:output, "\n")[15 :], "\n")
    endfunction

    function! g:ref_source_webdict_sites.ej.filter(output)
      return join(split(a:output, "\n")[15 :], "\n")
    endfunction

    function! g:ref_source_webdict_sites.wiktionary.filter(output)
      return join(split(a:output, "\n")[18 :], "\n")
    endfunction

endif

" for excitetranslate-vim
if isdirectory($HOME . '/.vim/bundle/excitetranslate-vim')

    " 開いたバッファを q で閉じれるようにする
    autocmd BufEnter ==Translate==\ Excite nnoremap <buffer> <silent> q :<C-u>close<CR>
    xnoremap E :ExciteTranslate<CR>

endif

" for vim-altercmd
if isdirectory($HOME . '/.vim/bundle/vim-altercmd')
    call altercmd#load()

    " for vim-ref
    CAlterCommand rfc               Ref rfc
    CAlterCommand man               Ref man
    CAlterCommand refe              Ref refe
    CAlterCommand ri                Ref ri
    CAlterCommand ans[wers]         Ref answers
    CAlterCommand cobuild           Ref cobuild
    CAlterCommand hyper[dict]       Ref hyperdict
    CAlterCommand longman           Ref longman
    CAlterCommand oxford            Ref oxford
    CAlterCommand synonym           Ref synonym
    CAlterCommand ej                Ref webdict ej
    CAlterCommand je                Ref webdict je
    CAlterCommand yd[ict]           Ref webdict yahoo_dict
    CAlterCommand wik[tionary]      Ref webdict wiktionary
    CAlterCommand wiki[pedia]       Ref webdict wikipedia
    CAlterCommand http[status]      HttpStatus

    " for gtags.vim
    CAlterCommand gt                Gtags
    CAlterCommand gtc               GtagsCursor

    " for vim-pukiwiki
    CAlterCommand puki[wiki]        PukiWiki
    CAlterCommand hitori[wiki]      PukiWiki hwiki

    " for QFixGrep
    CAlterCommand gr[ep]            Grep
    CAlterCommand rg[rep]           RGrep

    " for fugitive
    CAlterCommand gst[atus]         Gstatus
    CAlterCommand gco[mmit]         Gcommit

    " for vim-fontzoom
    CAlterCommand font[zoom]        Fontzoom
endif

" for vim-submode
if isdirectory($HOME . '/.vim/bundle/vim-submode')
    " Ctrl-w, > でウィンドウリサイズ用の submode に入る
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>-')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>+')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>-')
    call submode#map('winsize', 'n', '', '-', '<C-w>+')
endif

" for open-browser.vim
if isdirectory($HOME . '/.vim/bundle/open-browser.vim')
    let g:netrw_nogx = 1 " disable netrw's gx mapping.
    " URL 文字列上で gx でブラウザで開く
    nmap gx <Plug>(openbrowser-smart-search)
    " URL 文字列をビジュアル選択した上で gx でブラウザで開く
    vmap gx <Plug>(openbrowser-smart-search)
endif

" for VimShell
" if isdirectory($HOME . '/.vim/bundle/vimshell')
    " let g:vimshell_prompt_expr    = 'getcwd()." % "'
    " let g:vimshell_prompt_pattern = '^\f\+ % '
    " " new, vnew, nicely, tabnew
    " let g:vimshell_split_command = 'new'
    " let g:vimshell_popup_height  = 20
    " " <Space>vs で VimShell 起動
    " noremap <silent> <Space>vs :execute("VimShellPop -toggle ".expand("%:p:h"))<CR>
" endif

" for simplenote.vim
" if isdirectory($HOME . '/.vim/bundle/simplenote.vim')
    " if filereadable(expand("~/.simplenoterc"))
      " source ~/.simplenoterc
    " endif
    " let g:SimplenoteListHeight=20
    " let g:SimplenoteVertical=1
" endif

" for vim-pukiwiki
if isdirectory($HOME . '/.vim/bundle/vim-pukiwiki')
    " タイムスタンプは毎回更新する
    let g:pukiwiki_timestamp_update = 1
    if filereadable(expand("~/.pukiwikirc"))
      source ~/.pukiwikirc
    endif
    nnoremap <silent> ,upm :<C-u>Unite pukiwiki/menu<CR>
endif

" for YankRing.vim
if isdirectory($HOME . '/.vim/bundle/YankRing.vim')
    " F11 で :YRShow を実行できるようにする
    nnoremap <silent> <F11> :YRShow<CR>
    let g:yankring_history_dir   = expand($HOME) . '/tmp'
    let g:yankring_history_file  = '.yankring_history'
    let g:yankring_max_history   = 20
    let g:yankring_window_height = 15
endif

" for yankround.vim
if isdirectory($HOME . '/.vim/bundle/yankround.vim')
    let g:yankround_max_history = 35
    let g:yankround_dir         = expand($HOME) . '/tmp'
    nmap p <Plug>(yankround-p)
    xmap p <Plug>(yankround-p)
    nmap P <Plug>(yankround-P)
    nmap gp <Plug>(yankround-gp)
    xmap gp <Plug>(yankround-gp)
    nmap gP <Plug>(yankround-gP)
    nmap <C-p> <Plug>(yankround-prev)
    nmap <C-n> <Plug>(yankround-next)
endif

" for yanktmp.vim
if isdirectory($HOME . '/.vim/bundle/yanktmp.vim')
    let g:yanktmp_file = expand($HOME) . '/tmp/.yank_tmp_file'
    map <silent> sy :call YanktmpYank()<CR>
    map <silent> sp :call YanktmpPaste_p()<CR>
    map <silent> sP :call YanktmpPaste_P()<CR>
endif

" for rcmdnk/vim-markdown
if isdirectory($HOME . '/.vim/bundle/vim-markdown')
    " let g:vim_markdown_initial_foldlevel=1
    let g:vim_markdown_folding_disabled=1
    let g:vim_markdown_no_default_key_mappings=1
endif

" for QFixGrep
if isdirectory($HOME . '/.vim/bundle/qfixgrep')
  " マルチエンコーディングgrepモード
  "let g:MyGrep_MultiEncoding = 1

  " マルチエンコーディングgrep エンコーディングリスト
  "let g:MyGrep_MultiEncodingList = ['utf-8', 'cp932']

  " QFixGrepの検索時にカーソル位置の単語を拾う/拾わない
  "let MyGrep_DefaultSearchWord = 1

  " プレビューや絞り込みをQuickFix/ロケーションリストの両方で有効化(デフォルト:2)
  let QFixWin_EnableMode = 1

  " QFixGrepでロケーションリストを使用する/しない
  let MyGrep_UseLocationList = 0

  " ,tq で Quickfix ウィンドウを ON/OF
  nnoremap <silent> ,tq :ToggleQFixWin<CR>
endif

