" for Plugin settings

" for Wombat
if isdirectory($HOME . '/.vim/bundle/Wombat')
    colorscheme wombat
endif

" for NERDTree
if isdirectory($HOME . '/.vim/bundle/The-NERD-tree')
    " autocmd VimEnter * NERDTree
    " 隠しファイルを表示
    let NERDTreeShowHidden = 1
    autocmd VimEnter * wincmd p
    autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
    nmap <silent> <F7> :NERDTreeToggle<CR>
endif

" for NERD Commenter
if isdirectory($HOME . '/.vim/bundle/The-NERD-Commenter')
    " コメントの間にスペースを空ける
    let NERDSpaceDelims = 1
    " 未対応ファイルタイプのエラーメッセージを表示しない
    let NERDShutUp=1
endif

" for taglist
if isdirectory($HOME . '/.vim/bundle/taglist.vim')
    " let Tlist_Ctags_Cmd = "/path/to/ctags"
    let Tlist_Show_One_File = 1
    let Tlist_Exit_OnlyWindow = 1
    let Tlist_Use_Right_Window = 1
    nmap <silent> <F9> :TlistToggle<CR>
endif

" for srcexpl.vim
if isdirectory($HOME . '/.vim/bundle/SrcExpl')
    let g:SrcExpl_refreshTime = 1
    let g:SrcExpl_WinHeight = 8
    let g:SrcExpl_pluginList = [
            \ "__Tag_List__",
            \ "_NERD_tree_",
            \ "Source_Explorer"
        \ ]
    nmap <F8> :SrcExplToggle<CR>
    let g:SrcExpl_gobackKey = "<SPACE>"
    let g:SrcExpl_isUpdateTags = 0
    " let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."
    let g:SrcExpl_updateTagsKey = "<F12>"
endif

" for neocomplcache
if isdirectory($HOME . '/.vim/bundle/neocomplcache')
    " Disable AutoComplPop.
    let g:acp_enableAtStartup = 0
    " Use neocomplecache.
    let g:neocomplcache_enable_at_startup = 1
    let g:neocomplcache_auto_completion_start_length = 3
    " Use smartcase.
    let g:neocomplcache_enable_smart_case = 1
    " Use camel case completion.
    let g:neocomplcache_enable_camel_case_completion = 0
    " Use underbar completion.
    let g:neocomplcache_enable_underbar_completion = 0
    " Set minimum syntax keyword length.
    let g:neocomplcache_min_syntax_length = 3
    let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
    let g:neocomplcache_enable_quick_match = 1
    let g:neocomplcache_enable_auto_select = 0
    let g:neocomplcache_max_list = 20
    " Define dictionary.
    if !exists('g:neocomplcache_keyword_patterns')
      let g:neocomplcache_keyword_patterns = {}
    endif
    let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
    "imap <C-k>     <Plug>(neocomplcache_snippets_expand)
    "smap <C-k>     <Plug>(neocomplcache_snippets_expand)
    " TAB completion.
    "inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"
    inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
    function! s:my_crinsert()
      return pumvisible() ? neocomplcache#close_popup() : "\<Cr>"
    endfunction
    inoremap <silent> <CR> <C-R>=<SID>my_crinsert()<CR>
    inoremap <expr><C-g> neocomplcache#undo_completion()
    inoremap <expr><C-l> neocomplcache#complete_common_string()
    inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><BS>  neocomplcache#smart_close_popup()."\<C-h>"
    inoremap <expr><C-y> neocomplcache#close_popup()
    inoremap <expr><C-e> neocomplcache#cancel_popup()
    " Enable omni completion.
    autocmd FileType css           setlocal omnifunc=csscomplete#CompleteCSS
    autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
    autocmd FileType javascript    setlocal omnifunc=javascriptcomplete#CompleteJS
    autocmd FileType python        setlocal omnifunc=pythoncomplete#Complete
    autocmd FileType xml           setlocal omnifunc=xmlcomplete#CompleteTags
    autocmd FileType ruby          setlocal omnifunc=rubycomplete#Complete
    " Enable heavy omni completion.
    if !exists('g:neocomplcache_omni_patterns')
      let g:neocomplcache_omni_patterns = {}
    endif
    let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
    let g:neocomplcache_omni_patterns.c = '\%(\.\|->\)\h\w*'
    let g:neocomplcache_omni_patterns.cpp = '\h\w*\%(\.\|->\)\h\w*\|\h\w*::'
endif

" for neosnippet
if isdirectory($HOME . '/.vim/bundle/neosnippet')
    imap <C-k>     <Plug>(neosnippet_expand_or_jump)
    smap <C-k>     <Plug>(neosnippet_expand_or_jump)

    "imap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
    imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
    smap <expr><TAB> neosnippet#expandable() <Bar><bar> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

    if has('conceal')
      set conceallevel=2 concealcursor=i
    endif

    if isdirectory($HOME . '/.vim/bundle/snipmate-snippets')
      let g:neosnippet#enable_snipmate_compatibility = 1
      let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'
    endif
endif

" for unite.vim
if isdirectory($HOME . '/.vim/bundle/unite.vim')
    " ウィンドウサイズ
    let g:unite_winheight = 10
    nnoremap <silent> ,ub :<C-u>Unite buffer<CR>
    nnoremap <silent> ,uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
    nnoremap <silent> ,ur :<C-u>Unite -buffer-name=register register<CR>
    nnoremap <silent> ,um :<C-u>Unite file_mru<CR>
    nnoremap <silent> ,uu :<C-u>Unite buffer file_mru<CR>
    nnoremap <silent> ,ua :<C-u>UniteWithBufferDir -buffer-name=files buffer file_mru bookmark file<CR>
    nnoremap <silent> ,ufr :<C-u>Unite buffer file_rec<CR>
endif

" for vim-indent-guides
if isdirectory($HOME . '/.vim/bundle/vim-indent-guides')
    let g:indent_guides_enable_on_vim_startup=1
    let g:indent_guides_start_level = 1
    let g:indent_guides_guide_size = 1
    hi IndentGuidesOdd  ctermbg=green
    hi IndentGuidesEven ctermbg=black
endif

" for lightline.vim
if isdirectory($HOME . '/.vim/bundle/lightline.vim')
    let g:lightline = {
          \ 'colorscheme': 'wombat',
          \ 'component': {
          \   'readonly': '%{&readonly?"x":""}',
          \ },
          \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
          \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" }
        \ }
endif

" for vim-quickrun
if isdirectory($HOME . '/.vim/bundle/vim-quickrun')
    let g:quickrun_config = {}
    let g:quickrun_config._ = {
        \ 'outputter/buffer/split': ':botright',
        \ 'runner': 'vimproc'
        \ }
    let g:quickrun_config['markdown'] = {
        \ 'type': 'markdown/gfm',
        \ 'outputter': 'browser'
        \ }
    let g:quickrun_config['ruby.rspec'] = {
        \ 'command': 'rspec',
        \ 'cmdopt': 'bundle exec',
        \ 'exec': '%o %c %s',
        \ }
endif

" for simplenote.vim
if isdirectory($HOME . '/.vim/bundle/simplenote.vim')
    if filereadable(expand("~/.simplenoterc"))
      source ~/.simplenoterc
    endif
endif

" for vim-ref
if isdirectory($HOME . '/.vim/bundle/vim-ref')
    " FileType が text なら K で webdict を使う
    autocmd FileType text call ref#register_detection('_', 'webdict') 
    " vim-ref のバッファを q で閉じられるようにする
    autocmd FileType ref-* nnoremap <buffer> <silent> q :<C-u>close<CR>

    " 辞書定義
    let g:ref_source_webdict_sites = {
    \   'je': {
    \     'url': 'http://dictionary.infoseek.ne.jp/jeword/%s',
    \   },
    \   'ej': {
    \     'url': 'http://dictionary.infoseek.ne.jp/ejword/%s',
    \   },
    \   'yahoo_dict': {
    \     'url': 'http://dic.search.yahoo.co.jp/search?p=%s',
    \     'line': '57'
    \   },
    \   'wiktionary': {
    \     'url': 'http://ja.wiktionary.org/wiki/%s',
    \   },
    \   'wikipedia': {
    \     'url': 'http://ja.wikipedia.org/wiki/%s',
    \     'line': '3'
    \   },
    \ }

    " デフォルトサイト
    let g:ref_source_webdict_sites.default = 'ej'

    " 出力に対するフィルタ
    " 最初の数行を削除
    function! g:ref_source_webdict_sites.je.filter(output)
      return join(split(a:output, "\n")[15 :], "\n")
    endfunction

    function! g:ref_source_webdict_sites.ej.filter(output)
      return join(split(a:output, "\n")[15 :], "\n")
    endfunction

    function! g:ref_source_webdict_sites.wiktionary.filter(output)
      return join(split(a:output, "\n")[18 :], "\n")
    endfunction

endif

" for excitetranslate-vim
if isdirectory($HOME . '/.vim/bundle/excitetranslate-vim')

    " 開いたバッファを q で閉じれるようにする
    autocmd BufEnter ==Translate==\ Excite nnoremap <buffer> <silent> q :<C-u>close<CR>

endif

" for vim-altercmd
if isdirectory($HOME . '/.vim/bundle/vim-altercmd')
    call altercmd#load()

    " for vim-ref
    CAlterCommand rfc               Ref rfc
    CAlterCommand man               Ref man
    CAlterCommand refe              Ref refe
    CAlterCommand ri                Ref ri
    CAlterCommand ej                Ref webdict ej
    CAlterCommand je                Ref webdict je
    CAlterCommand yd[ict]           Ref webdict yahoo_dict
    CAlterCommand wik[tionary]      Ref webdict wiktionary
    CAlterCommand wiki[pedia]       Ref webdict wikipedia
    CAlterCommand ex[citetranslate] ExciteTranslate

endif

