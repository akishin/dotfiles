" Vim が neocomplete 対応環境かどうかを返す
function! s:meet_neocomplete_requirements()
    return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle     'Wombat'
NeoBundleLazy 'pyte'
NeoBundle     'vim-jp/vimdoc-ja'
NeoBundle     'vim-scripts/gtags.vim'
NeoBundle     'vim-scripts/SrcExpl'
NeoBundleLazy 'vim-scripts/nginx.vim', { 'autoload' : { 'filetypes' :[ "nginx"], }, }
NeoBundle     'scrooloose/syntastic'
NeoBundleLazy 'tpope/vim-rails',   { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundleLazy 'tpope/vim-rake',    { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundleLazy 'tpope/vim-bundler', { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundle     'tpope/vim-fugitive'
NeoBundleLazy 'Shougo/unite.vim', {
            \   'autoload' : {
            \       'commands' : [ "Unite", "UniteWithBufferDir", "UniteWithCurrentDir" ]
            \   }
            \ }
NeoBundleLazy 'Shougo/unite-outline', { 
            \   'depends' : 'Shougo/unite.vim',
            \   'autoload' : {
            \       'unite_sources' : 'outline'
            \   }
            \ }
let vimproc_updcmd = has('win64') ? 'tools\\update-dll-mingw 64' : 'tools\\update-dll-mingw 32'
execute "NeoBundle 'Shougo/vimproc'," . string({
      \ 'build' : {
      \     'windows' : vimproc_updcmd,
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ })
NeoBundleLazy 'Shougo/vimshell.git', {
            \ 'depends' : 'Shougo/vimproc',
            \ 'autoload' : {
            \   'commands' : [{ 'name' : 'VimShell',
            \                   'complete' : 'customlist,vimshell#complete'},
            \                 'VimShellExecute', 'VimShellInteractive',
            \                 'VimShellTerminal', 'VimShellPop'],
            \   'mappings' : ['<Plug>(vimshell_']
            \   }
            \ }
NeoBundle     'Shougo/neosnippet'
NeoBundle     'Shougo/neosnippet-snippets'
NeoBundle     'surround.vim'
NeoBundle     'The-NERD-tree'
NeoBundle     'The-NERD-Commenter'
NeoBundle     'taglist.vim'
NeoBundle     'matchit.zip'
NeoBundle     'endwise.vim'
NeoBundle     'Align'
NeoBundle     'YankRing.vim'
NeoBundle     'itchyny/lightline.vim'
NeoBundle     'kana/vim-submode'
NeoBundle     'kana/vim-textobj-user'
NeoBundle     'kana/vim-textobj-syntax'
NeoBundle     'kana/vim-textobj-indent'
NeoBundle     'kana/vim-textobj-function'
NeoBundle     'h1mesuke/textobj-wiw'
NeoBundleLazy 'rhysd/vim-textobj-ruby',      { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundleLazy 'vim-ruby/vim-ruby.git',       { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundleLazy 'derekwyatt/vim-scala.git',    { 'autoload' : { 'filetypes' :[ "scala"], }, }
NeoBundleLazy 'wlangstroth/vim-haskell.git', { 'autoload' : { 'filetypes' :[ "haskell"], }, }
NeoBundleLazy 'slim-template/vim-slim',      { 'autoload' : { 'filename_patterns' :[ "\.slim$"], }, }
NeoBundleLazy 'othree/html5.vim',            { 'autoload' : { 'filetypes' :[ "html"], }, }
NeoBundleLazy 'mattn/emmet-vim',             { 'autoload' : { 'filetypes' :[ "html"], }, }
NeoBundleLazy 'hail2u/vim-css3-syntax',      { 'autoload' : { 'filetypes' :[ "css", "less" ], }, }
NeoBundleLazy 'groenewege/vim-less',         { 'autoload' : { 'filename_patterns' :[ "\.less$" ], }, }
NeoBundleLazy 'skammer/vim-css-color',       { 'autoload' : { 'filetypes' :[ "css", "less" ], }, }
NeoBundleLazy 'kchmck/vim-coffee-script',    { 'autoload' : { 'filename_patterns' :[ "\.coffee$" ], }, }
NeoBundleLazy 'pangloss/vim-javascript',     { 'autoload' : { 'filetypes' :[ "javascript" ], }, }
NeoBundleLazy 'hallison/vim-markdown',       { 'autoload' : { 'filetypes' :[ "markdown"], }, }
NeoBundle     'nathanaelkane/vim-indent-guides'
NeoBundle     'mrtazz/simplenote.vim'
NeoBundle     'mattn/webapi-vim'
NeoBundle     'mattn/excitetranslate-vim'
NeoBundle     'mattn/httpstatus-vim'
NeoBundle     'mattn/sonictemplate-vim'
NeoBundle     'thinca/vim-quickrun'
NeoBundle     'thinca/vim-ref'
NeoBundle     'thinca/vim-singleton'
NeoBundleLazy 'yuku-t/vim-ref-ri', { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundle     'mfumi/ref-dicts-en'
NeoBundle     'tyru/open-browser.vim'
NeoBundle     'tyru/vim-altercmd'
NeoBundle     'rbtnn/rabbit-ui.vim'

" Vim が neocomplete に対応しているかどうかでプラグインを切換える
if s:meet_neocomplete_requirements()
    NeoBundle 'Shougo/neocomplete'
else
    NeoBundle 'Shougo/neocomplcache'
endif

" 要 python インターフェイス
if has('python')
    NeoBundleLazy 'Shougo/vinarise', {
                \   'autoload' : {
                \       'commands' : [ "Vinarise" ]
                \   }
                \ }
endif

" Go 用
if $GOPATH != ''
    NeoBundle     'dgryski/vim-godef'
endif

" RSense 用
if $RSENSE_HOME != ''
    NeoBundleLazy 'm2ym/rsense',          { 'autoload' : { 'filetypes' :[ "ruby"], }, }
    NeoBundleLazy 'alpaca-tc/vim-rsense', { 'autoload' : { 'filetypes' :[ "ruby"], }, }
endif

" OS 別
if has("win32") || has("win64")
    " Windows
elseif has("unix") || has('mac') || has('macunix')
    " Linux or Mac
    NeoBundle     'sudo.vim'
    NeoBundle     'ujihisa/neco-look'
    NeoBundleLazy 'superbrothers/vim-quickrun-markdown-gfm', { 'autoload' : { 'filetypes' :[ "markdown"], }, }
    NeoBundleLazy 'syngan/vim-pukiwiki', { 'autoload' : { 'commands' : 'PukiWiki' }, }
endif

call neobundle#end()
filetype plugin indent on

NeoBundleCheck
