scriptencoding utf-8

" for itchyny/vim-parenmatch
let g:loaded_matchparen = 1

" Vim が neocomplete 対応環境かどうかを返す
function! g:Meet_neocomplete_requirements()
    return has('lua') && (v:version > 703 || (v:version == 703 && has('patch885')))
endfunction

if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

call neobundle#begin(expand('~/.vim/bundle/'))

NeoBundleFetch 'Shougo/neobundle.vim'

NeoBundle     'Wombat'
NeoBundleLazy 'pyte'
NeoBundle     'vim-jp/vimdoc-ja'
NeoBundle     'embear/vim-localvimrc'
NeoBundle     'vis'
NeoBundle     'vim-scripts/gtags.vim'
NeoBundle     'vim-scripts/SrcExpl'
NeoBundle     'vim-scripts/matchit.zip'
NeoBundle     'vim-scripts/Align'
" NeoBundle     'vim-scripts/YankRing.vim'
NeoBundle     'vim-scripts/yanktmp.vim'
NeoBundle     'LeafCage/yankround.vim'
NeoBundle     'vim-scripts/taglist.vim'
NeoBundleLazy 'vim-scripts/nginx.vim', { 'autoload' : { 'filetypes' :[ "nginx"], }, }
NeoBundleLazy 'tpope/vim-rails',   { 'autoload' : { 'filetypes' :[ "ruby"], }, }
" NeoBundleLazy 'tpope/vim-rake',    { 'autoload' : { 'filetypes' :[ "ruby"], }, }
" NeoBundleLazy 'tpope/vim-bundler', { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundle     'tpope/vim-fugitive'
NeoBundle     'tpope/vim-surround'
NeoBundle     'tpope/vim-endwise'
NeoBundleLazy 'Shougo/unite.vim', {
            \   'autoload' : {
            \       'commands' : [ "Unite", "UniteWithBufferDir", "UniteWithCurrentDir" ]
            \   }
            \ }
NeoBundleLazy 'Shougo/neomru.vim', {
            \   'depends' : 'Shougo/unite.vim',
            \   'autoload' : {
            \       'unite_sources' : 'file_mru'
            \   }
            \ }
NeoBundleLazy 'Shougo/unite-outline', {
            \   'depends' : 'Shougo/unite.vim',
            \   'autoload' : {
            \       'unite_sources' : 'outline'
            \   }
            \ }
NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \     'windows' : 'tools\\update-dll-mingw',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'linux' : 'make',
            \     'unix' : 'gmake',
            \    },
            \ }
" NeoBundleLazy 'Shougo/vimshell.git', {
            " \ 'depends' : 'Shougo/vimproc',
            " \ 'autoload' : {
            " \   'commands' : [{ 'name' : 'VimShell',
            " \                   'complete' : 'customlist,vimshell#complete'},
            " \                 'VimShellExecute', 'VimShellInteractive',
            " \                 'VimShellTerminal', 'VimShellPop'],
            " \   'mappings' : ['<Plug>(vimshell_']
            " \   }
            " \ }
" NeoBundle     'Shougo/vimfiler'
" NeoBundle     'Shougo/neosnippet'
" NeoBundle     'Shougo/neosnippet-snippets'
NeoBundle     'The-NERD-tree'
NeoBundle     'The-NERD-Commenter'
NeoBundle     'scrooloose/syntastic'
NeoBundle     'itchyny/lightline.vim'
NeoBundle     'itchyny/vim-cursorword'
NeoBundle     'itchyny/vim-parenmatch'
NeoBundle     'kana/vim-submode'
" NeoBundle     'kana/vim-textobj-user'
" NeoBundle     'kana/vim-textobj-syntax'
" NeoBundle     'kana/vim-textobj-indent'
" NeoBundle     'kana/vim-textobj-function'
NeoBundle     'kana/vim-smartinput'
" NeoBundle     'mattn/vim-textobj-url'
NeoBundleLazy 'rhysd/vim-textobj-ruby',      { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundleLazy 'vim-ruby/vim-ruby.git',       { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundleLazy 'derekwyatt/vim-scala.git',    { 'autoload' : { 'filetypes' :[ "scala"], }, }
NeoBundleLazy 'wlangstroth/vim-haskell.git', { 'autoload' : { 'filetypes' :[ "haskell"], }, }
NeoBundleLazy 'slim-template/vim-slim',      { 'autoload' : { 'filename_patterns' :[ "\.slim$"], }, }
NeoBundleLazy 'digitaltoad/vim-pug',         { 'autoload' : { 'filename_patterns' :[ "\.pug$"], }, }
NeoBundleLazy 'othree/html5.vim',            { 'autoload' : { 'filetypes' :[ "html"], }, }
NeoBundleLazy 'mattn/emmet-vim',             { 'autoload' : { 'filetypes' :[ "html"], }, }
NeoBundleLazy 'hail2u/vim-css3-syntax',      { 'autoload' : { 'filetypes' :[ "css", "less" ], }, }
NeoBundleLazy 'groenewege/vim-less',         { 'autoload' : { 'filename_patterns' :[ "\.less$" ], }, }
NeoBundleLazy 'lilydjwg/colorizer',          { 'autoload' : { 'filetypes' :[ "css", "less" ], }, }
NeoBundleLazy 'kchmck/vim-coffee-script',    { 'autoload' : { 'filetypes' :[ "coffee" ], }, }
NeoBundleLazy 'pangloss/vim-javascript',     { 'autoload' : { 'filetypes' :[ "javascript" ], }, }
NeoBundleLazy 'rcmdnk/vim-markdown',         { 'autoload' : { 'filetypes' :[ "markdown"], }, }
NeoBundleLazy 'elixir-lang/vim-elixir',      { 'autoload' : { 'filetypes' :[ "elixir"], }, }
NeoBundleLazy 'rhysd/vim-crystal',           { 'autoload' : { 'filetypes' :[ "crystal"], }, }
" 最新だと「write(1) failed: Vital.Web.Http.request(syngan): curl: Too many redirects. When following redirects, curl hit the maximum amount.」が出て更新できなくなる環境がある
" 既に最新が入ってしまっている環境の場合は :NeoBundleReinstall vim-pukiwiki を実行
NeoBundleLazy 'syngan/vim-pukiwiki',         { 'rev': '24ac92f', 'autoload' : { 'commands' : 'PukiWiki' }, }
NeoBundleLazy 'fuenor/qfixgrep',             { 'autoload' : { 'commands' : ['Grep', 'Egrep', 'RGrep', 'FGrep', 'RFGrep', 'BGrep'], }, }
" NeoBundle     'rking/ag.vim'
NeoBundle     'nathanaelkane/vim-indent-guides'
" NeoBundle     'mrtazz/simplenote.vim'
NeoBundle     'mattn/webapi-vim'
NeoBundle     'mattn/excitetranslate-vim'
NeoBundle     'mattn/sonictemplate-vim'
NeoBundle     'thinca/vim-quickrun'
NeoBundle     'thinca/vim-ref'
NeoBundle     'thinca/vim-singleton'
NeoBundleLazy 'thinca/vim-qfreplace',        { 'autoload' : { 'commands' : ['Qfreplace'], }, }
NeoBundleLazy 'thinca/vim-fontzoom',         { 'autoload' : { 'commands' : ['Fontzoom'], }, }
NeoBundleLazy 'yuku-t/vim-ref-ri', { 'autoload' : { 'filetypes' :[ "ruby"], }, }
NeoBundle     'mfumi/ref-dicts-en'
NeoBundleLazy 'tyru/open-browser.vim', {
            \    'autoload': {
            \        'commands' : ['OpenBrowserSearch', 'OpenBrowser'],
            \        'functions' : ['openbrowser#open', 'openbrowser#load'],
            \        'mappings': '<Plug>(openbrowser-'
            \    }
            \ }
NeoBundle     'tyru/vim-altercmd'
NeoBundleLazy 'tsukkee/unite-help', { 
            \   'depends' : 'Shougo/unite.vim',
            \   'autoload' : {
            \       'unite_sources' : 'help'
            \   }
            \ }
NeoBundle     'ujihisa/repl.vim'

" Vim が neocomplete に対応しているかどうかでプラグインを切換える
if g:Meet_neocomplete_requirements()
    NeoBundle 'Shougo/neocomplete'
else
    NeoBundle 'Shougo/neocomplcache'
endif

" 要 python インターフェイス
if has('python')
    NeoBundleLazy 'Shougo/vinarise', {
                \   'autoload' : {
                \       'commands' : [ "Vinarise" ]
                \   }
                \ }
endif

" Go 用
if $GOPATH != ''
    NeoBundle     'dgryski/vim-godef'
    NeoBundleLazy 'google/vim-ft-go',    { 'autoload' : { 'filetypes' :[ "go"], }, }
    NeoBundleLazy 'vim-jp/vim-go-extra', { 'autoload' : { 'filetypes' :[ "go"], }, }
endif

" RSense 用
if $RSENSE_HOME != ''
    " NeoBundleLazy 'm2ym/rsense',          { 'autoload' : { 'filetypes' :[ "ruby"], }, }
    " NeoBundleLazy 'alpaca-tc/vim-rsense', { 'autoload' : { 'filetypes' :[ "ruby"], }, }
    NeoBundleLazy 'marcus/rsense',                       { 'autoload' : { 'filetypes' :[ "ruby"], }, }
    NeoBundleLazy 'supermomonga/neocomplete-rsense.vim', { 'autoload' : { 'filetypes' :[ "ruby"], }, }
endif

" OS 別
if has("win32") || has("win64")
    " Windows
elseif has("unix") || has('mac') || has('macunix')
    " Linux or Mac
    NeoBundle     'sudo.vim'
    NeoBundle     'ujihisa/neco-look'
endif

call neobundle#end()
filetype plugin indent on

NeoBundleCheck
